<%if !current_user%>
  <h1>Welcome</h1>
<%else%>
    <!DOCTYPE html>
    <head>
    <meta charset="utf-8">
    <title>Force-Directed Graph</title>
    <style>

        .node {
            cursor: pointer;
            stroke: #3182bd;
            stroke-width: 1.5px;
        }

        .link {
            fill: none;
            stroke: #9ecae1;
            stroke-width: 1.5px;
        }

    </style>
     <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
       <link rel="stylesheet" type="text/css" href="home.css">

     </head>
    <body>
    <div id="show">
    <div id="value">
        <div id="name"></div>
        <div id="image"></div>
        <div id="description"></div>
        <div id="followers"></div>
        <div id="following"></div>
    </div>
 <div id="schema"></div>
    <div id="value2">
        <div id="name2"></div>
        <div id="image2"></div>
                <div id="description2"></div>

        <div id="followers2"></div>
        <div id="following2"></div>
    </div>


   
    </div>
<p></p>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script>
    var nodeSelected;
var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("z-index", "10")
                .style("visibility", "hidden");
        var width = 400,
                height = 400,
                root;
        var jsonJavascript;
        var force = d3.layout.force()
                .size([width, height])
                .on("tick", tick);

        var svg = d3.select("#schema").append("svg")
                .attr("width", width)
                .attr("height", height);

        var link = svg.selectAll(".link"),
                node = svg.selectAll(".node");

        
            root = <%=raw '{"name": "Moi", "children":'%><%=raw @soundcloud_account%><%= raw  '}'%>;
            update();
       

        function update() {
            var nodes = flatten(root),
                    links = d3.layout.tree().links(nodes);

            // Restart the force layout.
            force
                    .nodes(nodes)
                    .links(links)
                    .start();

            // Update the links…
            link = link.data(links, function(d) { return d.target.id; });

            // Exit any old links.
            link.exit().remove();

            // Enter any new links.
            link.enter().insert("line", ".node")
                    .attr("class", "link")
                    .attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });

            // Update the nodes…
            node = node.data(nodes, function(d) { return d.id; }).style("fill", color);

            // Exit any old nodes.
            node.exit().remove();

            // Enter any new nodes.
            node.enter().append("circle")
                    .attr("class", "node")
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; })
                    .attr("r", function(d) { return Math.sqrt(d.size) / 10 || 4.5; })
                    .style("fill", color)
                    .on("click", click)
                    .call(force.drag)
                   .on("mouseover", function(d){
                           preview(d)});
                        
                    



        }

        function tick() {
            link.attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });

            node.attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
        }

        // Color leaf nodes orange, and packages white or blue.
        function color(d) {
            return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
        }

        function functionOver()
        {
            console.log("test");
        }

        // Toggle children on click.
        function click(d) {
            nodeSelected=d;
            var trouve=false;
            var url = '/pages/expandNew';
            if (!d3.event.defaultPrevented) {
            //     if (d.children) {
            //         d._children = d.children;
            //         d.children = null;
            //     } else {
            //         d.children = d._children;
            //         d._children = null;


            //     update();
            // }
            
            document.getElementById("name").innerHTML=d.username; 
            document.getElementById("description").innerHTML=d.description; 

            document.getElementById("following").innerHTML="Nombre de personnes qu'il suit :"+d.followings_count; 
            document.getElementById("followers").innerHTML="Nombre de personnes qui le suivent :"+d.followers_count; 
            $('#image').css("background-image","url("+d.avatar_url+")");





        $.ajax({
                 url: "/followings", // Route to the Script Controller method
                type: "GET",
                dataType: "json",
                data: { id_donne: d.id}, // This goes to Controller in params hash, i.e. params[:file_name]
            complete: function(
            ) {},
             success: function(data, textStatus, xhr) {console.log("le mec cliqué suit:");console.log(data);
             console.log("root");
             console.log(root);
             

for(i=0;i<root["children"].length;i++)
    {
        if (root["children"][i].id==d.id) {
            trouve=true;
            console.log("omg trouve :"+i);
            root["children"][i].children=data["children"];
            update();
        }

    }

    if(trouve==false)
    {
     console.log("c'est false");   

     for(i=0;i<root["children"].length;i++)
    {
        if(root["children"][i]["children"]){
          for(j=0;j<root["children"][i]["children"].length;j++)
        
      {
        if (root["children"][i]["children"][j].id==d.id) {
            trouve=true;
            console.log("omg trouve :"+i+"/"+j);
            root["children"][i]["children"][j].children=data["children"];
            update();
        }
    }
}

    }
}


                      },
               error: function() {
                        alert("Ajax error!")
                      }
    }); 

     


    console.log("clicked : "+d.username);     

         }   
        }
        function preview(d)
        {
 document.getElementById("name2").innerHTML=d.username; 
             document.getElementById("description2").innerHTML=d.description; 

            document.getElementById("following2").innerHTML="Nombre de personnes qu'il suit :"+d.followings_count; 
            document.getElementById("followers2").innerHTML="Nombre de personnes qui le suivent :"+d.followers_count; 
            $('#image2').css("background-image","url("+d.avatar_url+")");
        }

        // Returns a list of all nodes under the root.
        function flatten(root) {
            var nodes = [], i = 0;

            function recurse(node) {
                if (node.children) node.children.forEach(recurse);
                if (!node.id) node.id = ++i;
                nodes.push(node);
            }

            recurse(root);
            return nodes;
        }

    </script>


<%end%>