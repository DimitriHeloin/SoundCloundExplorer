<%if !current_user%>
<h1>Welcome</h1>
<%else%>
<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <title>Force-Directed Graph</title>
  <link rel="stylesheet" type="text/css" href="home.css">

  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

  <link rel="stylesheet" type="text/css" href="jqueryui.css">
  <link href='http://fonts.googleapis.com/css?family=PT+Serif:400,700' rel='stylesheet' type='text/css'>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>

  <script src="//connect.soundcloud.com/sdk.js"></script>
  <%= javascript_include_tag "application" %>
  <script src="//code.jquery.com/ui/1.10.4/jquery-ui.js"></script>

  <script>document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>')</script>
  <script src="http://d3js.org/d3.v3.min.js"></script>
  <script src="http://w.soundcloud.com/player/api.js"></script>

</head>

<div id="buttonShowNav"></div>
<div id="mainWindow">

  <div id="Search">
<div id="loadSearch"></div>

    <input type="text" class="form-control"  placeholder="Chercher artiste" name="username" id="search-text">
    <button id="buttonMoi">Moi</button>
    <ul data-role="listview"  id="search-result" data-theme="a"></ul>
  </div>

  <div id="viewWindow">

    <div id="dataWindow">
      <div id="value">
        <div id="previewGuy">
          <div id="image"></div>
          <div id="infos">
            <div id="username"></div>
            <div id="full_name"></div>
            <div id="city"></div>
            <div id="country"></div>
          </div>
        </div>
        <div id="stats">
          <div id="followers"></div>
          <div id="following"></div>
          <div id="tracksNumber"></div> 
          <div id="follow">
            <button type="button" idToFollow="" class="btn btn-default" id="followbutton">Follow</button>
          </div>
        </div>
      </div>
      <div id="listViewTrack" >

        <div id="tabs">

          <ul>
            <li><a href="#tabs-1">Tracks</a></li>
            <li><a href="#tabs-2">Likes</a></li>
          </ul>
          <div id="tabs-1" style="overflow-y: scroll;">
            <div id="loadTracks"></div>
           <ul data-role="listview"  id="track-list" data-theme="a">
           </ul>

         </div>
         <div id="tabs-2" style="overflow-y: scroll;">
            <div id="loadTracks"></div>
          <ul data-role="listview"  id="likes-list" data-theme="a">
          </ul>

        </div>

      </div>



    </div>
  </div>

  <div id="tree-container">
      <div id="loadFollowers"></div>

  </div>

</div>
<div class="player">
  <iframe id="soundcloud_widget" width="100%" height="100px" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=<%=@client.get('/me/favorites')[0].uri%>&show_artwork=false&liking=true&sharing=false&auto_play=false&visuel=false" ></iframe>
</div>
</div> 

<script>
  $(window).resize(function(){
    $height=$(window).height();
    $width=$(window).width();
    $("#viewWindow").height($height-100);
    $("#viewWindow").width($width);
    var viewerWidth = $("#tree-container").width();
    var viewerHeight = $("#tree-container").height();
    $("#zoneAffichageTree").height($height-100);
    $("#zoneAffichageTree").width($width-100);

  });
  $body = $("body");
  $loadFollow=false;
  $loadInit=false;
  $loadTracks=false;
  $loadSearch=false;
$(document).on({
    ajaxStart: function() { 
      if($loadFollow==true){
        $body.addClass("loadingFollowers")
      }
      if($loadTracks==true)
      {
        $body.addClass("loadingTracks");
      }
       if($loadSearch==true)
      {
        $body.addClass("loadingSearch");
      }    
    },
     ajaxStop: function() {
      $body.removeClass("loadingFollowers");
      $body.removeClass("loadingTracks"); 
      $body.removeClass("loadingSearch"); 
    }    
});
              
  $(document).ready(function() {
    $requests=[];
    $("#buttonMoi").hide();
    $selectednode=null;
    $rootNode=null;
    $menuOuvert=false;
    $premierClic=false;
    $functionClick=null;
    $functionUpdate=null;
    $functionflatten=null;
    $functionExpand=null;
    $navigationSurMoi=true;

    $('#search-text').on('input', function() {
      $loadSearch=true;
      $("#search-result").empty();  
      for(var i = 0; i < $requests.length; i++)
        $requests[i].abort();
      $requests.push(
       $.ajax({

                                     url: "/application/search", // Route to the Script Controller method
                                     type: "GET",
                                     dataType: "json",
                                    data: { username:  $("#search-text").val()}, // This goes to Controller in params hash, i.e. params[:file_name]
                                    complete: function() {
                                    },
                                    success: function(data, textStatus, xhr) {
                                      $("#search-result").empty();  

                                      $('#search-result').append('<li style="cursor:pointer;" id="resultatRecherche" idguy='+data["children"].id+' ">'+data["children"].username+'</li>');
                                        $loadSearch=false;


                                    },
                                    error: function() {
                                      //alert("Ajax error!")
                                    }
                                  })); 

});

$( "#search-result" ).on("click","li#resultatRecherche", function(event) {    
  $.ajax({

                                     url: "/application/changeRoot", // Route to the Script Controller method
                                     type: "GET",
                                     dataType: "json",
                                    data: { id_donne:  $("#resultatRecherche").attr('idguy')}, // This goes to Controller in params hash, i.e. params[:file_name]
                                    complete: function(


                                      ) {},
                                    success: function(data, textStatus, xhr) {
                                      $myJson=data;
                                        $.ajax({

                                     url: "/followings", // Route to the Script Controller method
                                     type: "GET",
                                     dataType: "json",
                                    data: { id_donne:  <%=@current_user.uid%>}, // This goes to Controller in params hash, i.e. params[:file_name]
                                    complete: function(


                                      ) {},
                                    success: function(data2, textStatus, xhr) {
                                      console.log(data2);
                                      
                                     



                                    },
                                    error: function() {
                                      alert("Ajax error!")
                                    }
                                  }); 
                                      console.log("ayé données récupérées");
                                      $("#zoneAffichageTree").remove();
                                      $("#search-result").empty();  
                                      $navigationSurMoi=false;
                                      initiategraph();
                                      $("#buttonMoi").show();
                                      $("#search-text").val("");



                                    },
                                    error: function() {
                                      alert("Ajax error!")
                                    }
                                  }); 

});
initiategraph();

$("#headeralakon").css("top","-52px");
$height=$(window).height();
$width=$(window).width();
$("#viewWindow").height($height-100);
$("#viewWindow").width($width);
var viewerWidth = $("#tree-container").width();
var viewerHeight = $("#tree-container").height();

$myJson=  <%=raw '{ "children":'%><%=raw @list_followings%><%= raw  '
, "id":'%><%=raw @current_user.uid%><%= raw  ',
"kind":"user",
"permalink":"'%><%=raw @client.get('/me').permalink%><%=raw'",
"avatar_url":"'%><%=raw @client.get('/me').avatar_url%><%=raw'",
"followings_count":'%><%=raw @client.get('/me').followings_count%><%=raw',
"followers_count":'%><%=raw @client.get('/me').followers_count%><%=raw',
"description":"'%><%= raw @client.get('/me').description%><%=raw'",
"username":"'%><%= raw @client.get('/me').username%><%=raw'"  }'%>;


$myFollowList=<%=raw @list_followings%>;

treeData=$myJson;
$("#follow").hide();
$("#followers").hide();
$("#following").hide();
$("#tracksNumber").hide();


$("#buttonMoi").click(function(){
  $.ajax({

                                     url: "/application/changeRoot", // Route to the Script Controller method
                                     type: "GET",
                                     dataType: "json",
                                    data: { id_donne:  <%=@current_user.uid%>}, // This goes to Controller in params hash, i.e. params[:file_name]
                                    complete: function(


                                      ) {},
                                    success: function(data, textStatus, xhr) {
                                      $myJson=data;
                                      console.log("ayé données récupérées");
                                      $("#zoneAffichageTree").remove();
                                      $("#search-result").empty();  
                                      $navigationSurMoi=true;
                                      initiategraph();
                                      $("#buttonMoi").hide();
                                      $("#search-text").val("");


                                    },
                                    error: function() {
                                      alert("Ajax error!")
                                    }
                                  }); 
});

$("#buttonShowNav").click(function(){
  if($menuOuvert==false)
  {
    $("#headeralakon").animate({top:"0px"},250);
    $("#buttonShowNav").animate({top:"52px"},250);
    $menuOuvert=true;

  }
  else
  {
    $("#headeralakon").animate({top:"-52px"},250);
    $("#buttonShowNav").animate({top:"0px"},250);

    $menuOuvert=false;


  }

});

$("#followbutton").click(function(){
  if($(this).html()=="Follow")
  {

    $.ajax({

                                     url: "/application/ajouteFollow", // Route to the Script Controller method
                                     type: "GET",
                                     dataType: "json",
                                    data: { id_donne: $(this).attr("idToFollow")}, // This goes to Controller in params hash, i.e. params[:file_name]
                                    complete: function(


                                      ) {},
                                    success: function(data, textStatus, xhr) {
                                      if($navigationSurMoi==true){

                                        var index = $selectednode.parent.children.indexOf($selectednode);
                                        if (index > -1) {
                                          $selectednode.parent.children.splice(index, 1);
                                        }
                                        $rootNode[$rootNode.length-1].children.push($selectednode);
                                        $functionClick($selectednode);
                                        $functionClick($selectednode);
                                      }
                                      $("#followbutton").removeClass('btn-default');
                                      $("#followbutton").addClass('btn-warning');
                                      $("#followbutton").html('Following');
                                      setTimeout(function(){$functionUpdate($selectednode)
                                      },750);
                    // Make sure that the node being added to is expanded so user can see added node is correctly moved
                  },
                  error: function() {
                    alert("Ajax error!")
                  }
                }); 
}
if($(this).html()=="Following")
{
  $(this).addClass('btn-default');
  $(this).removeClass('btn-warning');
  $(this).html('Follow');
  $.ajax({

                                     url: "/application/deleteFollow", // Route to the Script Controller method
                                     type: "GET",
                                     dataType: "json",
                                    data: { id_donne:  $(this).attr("idToFollow")}, // This goes to Controller in params hash, i.e. params[:file_name]
                                    complete: function(


                                      ) {},
                                    success: function(data, textStatus, xhr) {
                                      if($navigationSurMoi==true){

                                        var index = $selectednode.parent.children.indexOf($selectednode);
                                        if (index > -1) {
                                          $selectednode.parent.children.splice(index, 1);
                                        }
                                        $functionClick($rootNode[$rootNode.length-1]);
                                        $functionClick($rootNode[$rootNode.length-1]);
                                        setTimeout(function(){$functionUpdate($rootNode[$rootNode.length-1])
                                        },750);
                                      }

                                      $("#followbutton").removeClass('btn-warning');
                                      $("#followbutton").addClass('btn-default');
                        $("#followbutton").html('');                                //$myJson["children"]=data;
                        if($navigationSurMoi==false)
                        {
                        $("#followbutton").html('Follow');                                //$myJson["children"]=data;

                      }

                    },
                    error: function() {
                      alert("Ajax error!")
                    }
                  }); 
}

});

        //Ici on met les infos du mec qui s'enregistre
        document.getElementById("username").innerHTML="<%=@current_user.username%>"; 

        $('#image').css("background-image","url("+"<%=@client.get('/me').avatar_url.sub! 'large', 't500x500'%>" +")");
        $( "#tabs" ).tabs();



        // ici on charge le dernier like du mec enregistré
        var widget = SC.Widget(document.getElementById('soundcloud_widget'));
                 //on charge la lsite des likes /tracks du mec
                 $.ajax({

                             url: "/application/urltracks", // Route to the Script Controller method
                             type: "GET",
                             dataType: "json",
                            data: { id_donne: <%=raw @client.get('/me').id%>}, // This goes to Controller in params hash, i.e. params[:file_name]
                            complete: function(


                              ) {},
                            success: function(data, textStatus, xhr) {
                              $("#track-list").empty();
                              for(var index =0;index<data["children"].length;index++)
                              {
                                $('#track-list').append('<li class="track_li" style="cursor:pointer;" linkPlayer="'+data["children"][index].uri+'"><div class="titreTrack"><p>'+data["children"][index].title+'</p></div><div class="playcount"><p>'+data["children"][index].playback_count+'</p></div><div class="likescount"><p>'+data["children"][index].favoritings_count+'</p></li>');

                              }

                            },
                            error: function() {
                              alert("Ajax error!")
                            }
                          }); 
$.ajax({

                             url: "/application/urllikes", // Route to the Script Controller method
                             type: "GET",
                             dataType: "json",
                            data: { id_donne: <%=raw @client.get('/me').id%>}, // This goes to Controller in params hash, i.e. params[:file_name]
                            complete: function(


                              ) {},
                            success: function(data, textStatus, xhr) {
                              $("#likes-list").empty();
                              for(var index =0;index<data["children"].length;index++)
                              {
                                $('#likes-list').append('<li class="track_li" style="cursor:pointer;" linkPlayer="'+data["children"][index].uri+'"><div class="titreTrack"><p>'+data["children"][index].title+'</p></div><div class="playcount"><p>'+data["children"][index].playback_count+'</p></div><div class="likescount"><p>'+data["children"][index].favoritings_count+'</p></li>');

                              }


                            },
                            error: function() {
                              alert("Ajax error!")
                            }
                          }); 
});


function initiategraph()
{
  treeJSON = d3.json("events.json", function(error) {

            // Calculate total nodes, max label length
            var totalNodes = 0;
            var maxLabelLength = 0;
            $functionflatten=flatten;
            $functionUpdate=update;
            $functionExpand=expand;
            $functionCollapse=collapse;
            $functionPan=pan;
            $functionSortTree=sortTree;
            $functionClick=click;
            $functionZoom=zoom;
            $functionToggleChildren=toggleChildren;
            $functionCenterNode=centerNode;
            // panning variables
            var panSpeed = 200;
            var panBoundary = 20; // Within 20px from edges will pan when dragging.
            // Misc. variables
            var i = 0;
            var duration = 750;
            var root=$myJson;
            $rootNode=flatten(root);
            // size of the diagram
            var viewerWidth = $("#tree-container").width();
            var viewerHeight = $("#tree-container").height();

            var tree = d3.layout.tree()
            .size([viewerHeight, viewerWidth]);

            // define a d3 diagonal projection for use by the node paths later on.
            var diagonal = d3.svg.diagonal()
            .projection(function(d) {
              return [d.y, d.x];
            });

            // A recursive helper function for performing some setup by walking through all nodes

            function visit(parent, visitFn, childrenFn) {
              if (!parent) return;

              visitFn(parent);

              var children = childrenFn(parent);
              if (children) {
                var count = children.length;
                for (var i = 0; i < count; i++) {
                  visit(children[i], visitFn, childrenFn);
                }
              }
            }

            // Call visit function to establish maxLabelLength
            visit($myJson, function(d) {
              totalNodes++;
              maxLabelLength = Math.max(d.username.length, maxLabelLength);

            }, function(d) {
              return d.children && d.children.length > 0 ? d.children : null;
            });


            // sort the tree according to the node names

            function sortTree() {
              tree.sort(function(a, b) {
                return b.username.toLowerCase() < a.username.toLowerCase() ? 1 : -1;
              });
            }
            // Sort the tree initially incase the JSON isn't in a sorted order.
            sortTree();

            // TODO: Pan function, can be better implemented.

            function pan(domNode, direction) {
              var speed = panSpeed;
              if (panTimer) {
                clearTimeout(panTimer);
                translateCoords = d3.transform(svgGroup.attr("transform"));
                if (direction == 'left' || direction == 'right') {
                  translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;
                  translateY = translateCoords.translate[1];
                } else if (direction == 'up' || direction == 'down') {
                  translateX = translateCoords.translate[0];
                  translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;
                }
                scaleX = translateCoords.scale[0];
                scaleY = translateCoords.scale[1];
                scale = zoomListener.scale();
                svgGroup.transition().attr("transform", "translate(" + translateX + "," + translateY + ")scale(" + scale + ")");
                d3.select(domNode).select('g.node').attr("transform", "translate(" + translateX + "," + translateY + ")");
                zoomListener.scale(zoomListener.scale());
                zoomListener.translate([translateX, translateY]);
                panTimer = setTimeout(function() {
                  pan(domNode, speed, direction);
                }, 50);
              }
            }

            // Define the zoom function for the zoomable tree

            function zoom() {
              svgGroup.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }


            // define the zoomListener which calls the zoom function on the "zoom" event constrained within the scaleExtents
            var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on("zoom", zoom);

            
            // define the baseSvg, attaching a class for styling and the zoomListener
            var baseSvg = d3.select("#tree-container").append("svg")
            .attr("width", viewerWidth)
            .attr("id","zoneAffichageTree")
            .attr("height", viewerHeight)
            .attr("class", "overlay")
            .call(zoomListener);






            // Helper functions for collapsing and expanding nodes.

            function collapse(d) {
              if (d.children) {
                d._children = d.children;
                d._children.forEach(collapse);
                d.children = null;
              }
            }

            function expand(d) {
              if (d._children) {
                d.children = d._children;
                d.children.forEach(expand);
                d._children = null;
              }
            }

            var overCircle = function(d) {
              $selectednode = d;
              updateTempConnector();
            };
            var outCircle = function(d) {
              $selectednode = null;
              updateTempConnector();
            };



            // Function to center node when clicked/dropped so node doesn't get lost when collapsing/moving with large amount of children.

            function centerNode(source) {
              scale = zoomListener.scale();
              x = -source.y0;
              y = -source.x0;
              x = x * scale + viewerWidth / 2;
              y = y * scale + viewerHeight / 2;
              d3.select('g').transition()
              .duration(duration)
              .attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
              zoomListener.scale(scale);
              zoomListener.translate([x, y]);
            }

            // Toggle children function

            function toggleChildren(d) {
              if (d.children) {
                d._children = d.children;
                d.children = null;
              } else {
                d.children = d._children;
                d._children = null;
              }
              return d;
            }

            $(document).on('click', '#track-list li ', function(){  
              var linkTrack = $(this).attr('linkPlayer');
              SC.oEmbed(linkTrack, {auto_play: false,show_comments:false,show_artwork:true,liking:false,buying:false,sharing:false,maxheight:100}, $(".player").get(0));
              if (oEmbed) $('#player').html(oEmbed.html.replace('visual=true&',''));


            });
            $(document).on('click', '#likes-list li ', function(){  
              var linkTrack = $(this).attr('linkPlayer');
              SC.oEmbed(linkTrack, {auto_play: false,show_comments:false,show_artwork:true,liking:false,buying:false,sharing:false,maxheight:100}, $(".player").get(0));
                            if (oEmbed) $('#player').html(oEmbed.html.replace('visual=true&',''));

            });
            // Toggle children on click.

            function click(d) {
              var listNodes;

              $loadTracks=true;
              $selectednode=d;
              listNodes=flatten(root);            
        listNodes.forEach(function(entry)
        {
          if(getProfondeur(entry)>=getProfondeur($selectednode) && entry!=$selectednode)
          {
            collapse(entry);
          }
        });
              console.log("now");
                //if (d3.event.defaultPrevented) return; // click suppressed
                if($premierClic==false)
                {
                  $("#follow").fadeIn("fast");
                  $("#followers").fadeIn("fast");
                  $("#following").fadeIn("fast");
                  $("#tracksNumber").fadeIn("fast");
                  $premierClic=true;
                }
                d = toggleChildren(d);
                update(d);
                centerNode(d);

                document.getElementById("username").innerHTML=d.username; 
                document.getElementById("full_name").innerHTML=d.full_name; 
                document.getElementById("city").innerHTML=d.city; 
                document.getElementById("country").innerHTML=d.country; 
                document.getElementById("following").innerHTML=d.followings_count; 
                document.getElementById("followers").innerHTML=+d.followers_count; 
                document.getElementById("tracksNumber").innerHTML=+d.track_count; 

                $("#followbutton").attr('idToFollow',d.id);
                var testDeja=false;
                for(var i=0;i<$myFollowList.length;i++)
                {
                  if($myFollowList[i].id===d.id)
                  {
                    testDeja=true;
                    $("#followbutton").removeClass('btn-default');
                    $("#followbutton").addClass('btn-warning');
                    $("#followbutton").html('Following');

                  }                
                }
                if(testDeja==false)
                {
                  $("#followbutton").removeClass('btn-warning');
                  $("#followbutton").addClass('btn-default');
                  $("#followbutton").html('Follow');

                }


                $('#image').css("background-image","url("+d.avatar_url.replace("large", "t500x500")+")");

                if(!d.children && !d._children){
                  $loadFollow=true;
                  $.ajax({
                             url: "/followings", // Route to the Script Controller method
                             type: "GET",
                             dataType: "json",
                            data: { id_donne: d.id}, // This goes to Controller in params hash, i.e. params[:file_name]
                            complete: function() {

                              console.log("complete");
                            },
                            success: function(data, textStatus, xhr) {
                              $loadFollow=false;

                              console.log("ayé données");
                               listNodes=flatten(root);            
                              var listeId=[];
                              var valeurEnTrop=[];
                              listNodes.forEach(function(entry)
                              {
                                if(!$rootNode)
                                {
                                  if(entry.id==<%=@client.get('/me').id%>)
                                  {
                                    $rootNode=entry;
                                  }
                                }
                                listeId.push(entry.id)

                              });
                              if(d.children==null&&d._children==null)
                              {
                                d.children=data["children"];
                                for(var i=0;i<d.children.length;i++)
                                {
                                  for(var j=0;j<listeId.length;j++)
                                  {
                                    if(d.children[i].id===listeId[j])
                                    {
                                      valeurEnTrop.push(i);
                                    }
                                  }

                                    // listNodes.forEach(function(entry){ 
                                    //     if(d.children[i].id===entry.id)
                                    //     {
                                    //         d.children.splice(i, 1);
                                    //         update(entry);
                                    //     }
                                    //     });  
}
valeurEnTrop.reverse();
for(var k=0;k<valeurEnTrop.length;k++)
{
  d.children.splice(valeurEnTrop[k], 1);

}



update(d);


}



},
error: function() {
  alert("Ajax error!")
}
});
}
$.ajax({

                             url: "/application/urllikes", // Route to the Script Controller method
                             type: "GET",
                             dataType: "json",
                            data: { id_donne: d.id}, // This goes to Controller in params hash, i.e. params[:file_name]
                            complete: function(


                              ) {},
                            success: function(data, textStatus, xhr) {
                              $("#likes-list").empty();
                              for(var index =0;index<data["children"].length;index++)
                              {
                                 $('#likes-list').append('<li class="track_li" style="cursor:pointer;" linkPlayer="'+data["children"][index].uri+'"><div class="titreTrack"><p>'+data["children"][index].title+'</p></div><div class="playcount"><p>'+data["children"][index].playback_count+'</p></div><div class="likescount"><p>'+data["children"][index].favoritings_count+'</p></li>');

                              }
                            },
                            error: function() {
                              alert("Ajax error!")
                            }
                          }); 

$.ajax({

                             url: "/application/urltracks", // Route to the Script Controller method
                             type: "GET",
                             dataType: "json",
                            data: { id_donne: d.id}, // This goes to Controller in params hash, i.e. params[:file_name]
                            complete: function(

                              ) {                              $loadTracks=false;
},
                            success: function(data, textStatus, xhr) {
                              $("#track-list").empty();
                              for(var index =0;index<data["children"].length;index++)
                              {
                                 $('#track-list').append('<li class="track_li" style="cursor:pointer;" linkPlayer="'+data["children"][index].uri+'"><div class="titreTrack"><p>'+data["children"][index].title+'</p></div><div class="playcount"><p>'+data["children"][index].playback_count+'</p></div><div class="likescount"><p>'+data["children"][index].favoritings_count+'</p></li>');

                              }


                            },
                            error: function() {
                              alert("Ajax error!")
                            }
                          }); 


      



}
function getProfondeur(d)
{
  var tempnode=d;
             var testParent=true;
             var compteur=0;
          while(testParent==true)
          {
            if(tempnode.parent)
            {
              tempnode=tempnode.parent;
              compteur++;
            }
            else
              testParent=false;
          }
      return compteur;
}

function flatten(root) {
  var nodes = [], i = 0;

  function recurse(node) {
    if (node.children) node.children.forEach(recurse);
    if (!node.id) node.id = ++i;
    nodes.push(node);
  }

  recurse(root);
  return nodes;
}

function update(source) {
                // Compute the new height, function counts total children of root node and sets tree height accordingly.
                // This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed
                // This makes the layout more consistent.
                var levelWidth = [1];
                var childCount = function(level, n) {

                  if (n.children && n.children.length > 0) {
                    if (levelWidth.length <= level + 1) levelWidth.push(0);

                    levelWidth[level + 1] += n.children.length;
                    n.children.forEach(function(d) {
                      childCount(level + 1, d);
                    });
                  }
                };
                childCount(0, root);
                var newHeight = d3.max(levelWidth) * 25; // 25 pixels per line  
                tree = tree.size([newHeight, viewerWidth]);

                // Compute the new tree layout.
                var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

                // Set widths between levels based on maxLabelLength.
                nodes.forEach(function(d) {
                    d.y = (d.depth * (maxLabelLength * 10)); //maxLabelLength * 10px
                    // alternatively to keep a fixed scale one can set a fixed depth per level
                    // Normalize for fixed-depth by commenting out below line
                    // d.y = (d.depth * 500); //500px per level.
                  });

                // Update the nodes…
                node = svgGroup.selectAll("g.node")
                .data(nodes, function(d) {
                  return d.id || (d.id = ++i);
                });

                // Enter any new nodes at the parent's previous position.
                var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) {
                  return "translate(" + source.y0 + "," + source.x0 + ")";
                })
                .on('click', click);

                nodeEnter.append("circle")
                .attr('class', 'nodeCircle')
                .attr("r", 0)
                .style("fill", function(d) {
                  return d._children ? "lightsteelblue" : "#fff";
                });

                nodeEnter.append("text")
                .attr("x", function(d) {
                  return d.children || d._children ? -10 : 10;
                })
                .attr("dy", ".35em")
                .attr('class', 'nodeText')
                .attr("text-anchor", function(d) {
                  return d.children || d._children ? "end" : "start";
                })
                .text(function(d) {
                  return d.username;
                })
                .style("fill-opacity", 0);

                // phantom node to give us mouseover in a radius around it
                nodeEnter.append("circle")
                .attr('class', 'ghostCircle')
                .attr("r", 30)
                    .attr("opacity", 0.2) // change this to zero to hide the target area
                    .style("fill", "red")
                    .attr('pointer-events', 'mouseover')
                    .on("mouseover", function(node) {
                      overCircle(node);
                    })
                    .on("mouseout", function(node) {
                      outCircle(node);
                    });

                // Update the text to reflect whether node has children or not.
                node.select('text')
                .attr("x", function(d) {
                  return d.children || d._children ? -10 : 10;
                })
                .attr("text-anchor", function(d) {
                  return d.children || d._children ? "end" : "start";
                })
                .text(function(d) {
                  return d.username;
                });

                // Change the circle fill depending on whether it has children and is collapsed
                node.select("circle.nodeCircle")
                .attr("r", 4.5)
                .style("fill", function(d) {
                  return d._children ? "lightsteelblue" : "#fff";
                });

                // Transition nodes to their new position.
                var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function(d) {
                  return "translate(" + d.y + "," + d.x + ")";
                });

                // Fade the text in
                nodeUpdate.select("text")
                .style("fill-opacity", 1);

                // Transition exiting nodes to the parent's new position.
                var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function(d) {
                  return "translate(" + source.y + "," + source.x + ")";
                })
                .remove();

                nodeExit.select("circle")
                .attr("r", 0);

                nodeExit.select("text")
                .style("fill-opacity", 0);

                // Update the links…
                var link = svgGroup.selectAll("path.link")
                .data(links, function(d) {
                  return d.target.id;
                });

                // Enter any new links at the parent's previous position.
                link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", function(d) {
                  var o = {
                    x: source.x0,
                    y: source.y0
                  };
                  return diagonal({
                    source: o,
                    target: o
                  });
                });

                // Transition links to their new position.
                link.transition()
                .duration(duration)
                .attr("d", diagonal);

                // Transition exiting nodes to the parent's new position.
                link.exit().transition()
                .duration(duration)
                .attr("d", function(d) {
                  var o = {
                    x: source.x,
                    y: source.y
                  };
                  return diagonal({
                    source: o,
                    target: o
                  });
                })
                .remove();

                // Stash the old positions for transition.
                nodes.forEach(function(d) {
                  d.x0 = d.x;
                  d.y0 = d.y;
                });
              }

            // Append a group which holds all nodes and which the zoom Listener can act upon.
            var svgGroup = baseSvg.append("g");

            // Define the root
            root = $myJson;
            root.x0 = viewerHeight / 2;
            root.y0 = 0;

            // Layout the tree initially and center on the root node.
            update(root);
            centerNode(root);
          });
}


</script>

<%end%>
